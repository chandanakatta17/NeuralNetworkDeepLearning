{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyP1YktYH2CPF4orpQnULFc4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "KP1bKJK9EJQV",
        "outputId": "4b19bcf3-e991-43ca-c7b0-8995ae03b54b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
            "170498071/170498071 [==============================] - 15s 0us/step\n",
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 32, 32, 32)        896       \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 32, 32, 32)        0         \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 32, 32, 32)        9248      \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 16, 16, 32)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 16, 16, 64)        18496     \n",
            "                                                                 \n",
            " dropout_1 (Dropout)         (None, 16, 16, 64)        0         \n",
            "                                                                 \n",
            " conv2d_3 (Conv2D)           (None, 16, 16, 64)        36928     \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 8, 8, 64)         0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_4 (Conv2D)           (None, 8, 8, 128)         73856     \n",
            "                                                                 \n",
            " dropout_2 (Dropout)         (None, 8, 8, 128)         0         \n",
            "                                                                 \n",
            " conv2d_5 (Conv2D)           (None, 8, 8, 128)         147584    \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPooling  (None, 4, 4, 128)        0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 2048)              0         \n",
            "                                                                 \n",
            " dropout_3 (Dropout)         (None, 2048)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 1024)              2098176   \n",
            "                                                                 \n",
            " dropout_4 (Dropout)         (None, 1024)              0         \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 512)               524800    \n",
            "                                                                 \n",
            " dropout_5 (Dropout)         (None, 512)               0         \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 10)                5130      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 2,915,114\n",
            "Trainable params: 2,915,114\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/optimizers/legacy/gradient_descent.py:114: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super().__init__(name, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "None\n",
            "Epoch 1/5\n",
            "1563/1563 [==============================] - 22s 8ms/step - loss: 1.8745 - accuracy: 0.3104 - val_loss: 1.6366 - val_accuracy: 0.4103\n",
            "Epoch 2/5\n",
            "1563/1563 [==============================] - 12s 8ms/step - loss: 1.4996 - accuracy: 0.4550 - val_loss: 1.4733 - val_accuracy: 0.4742\n",
            "Epoch 3/5\n",
            "1563/1563 [==============================] - 12s 8ms/step - loss: 1.3719 - accuracy: 0.5009 - val_loss: 1.3268 - val_accuracy: 0.5171\n",
            "Epoch 4/5\n",
            "1563/1563 [==============================] - 13s 8ms/step - loss: 1.2913 - accuracy: 0.5343 - val_loss: 1.2831 - val_accuracy: 0.5330\n",
            "Epoch 5/5\n",
            "1563/1563 [==============================] - 15s 9ms/step - loss: 1.2290 - accuracy: 0.5592 - val_loss: 1.1745 - val_accuracy: 0.5794\n",
            "Accuracy: 57.94%\n",
            "1/1 [==============================] - 0s 395ms/step\n",
            "Predicted labels: [3 1 8 0]\n",
            "Actual labels:  [3 8 8 0]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAAHHCAYAAABDUnkqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABlyklEQVR4nO3dd3wUdf7H8dem94SEkgRC7y0gHURAQWoE7MKdIHbxFD0b+hPhLOjZsCB2Uc9yJ00FAUGlg9TQO6EmlATSSd35/TEQjcCSwCaT3byfj8c8uJn97s5nWHN5M/MtNsMwDERERETchIfVBYiIiIg4k8KNiIiIuBWFGxEREXErCjciIiLiVhRuRERExK0o3IiIiIhbUbgRERERt6JwIyIiIm5F4UZERETcisKNiFRYNpuN8ePHl/p9+/fvx2azMXXqVKfXJCIVn8KNiDg0depUbDYbNpuNZcuWnfO6YRjExMRgs9kYNGiQBRVeukWLFmGz2Zg2bZrVpYiIEynciEiJ+Pn58fXXX59zfPHixRw+fBhfX18LqhIROZfCjYiUyIABA/juu+8oKCgodvzrr7+mXbt2REZGWlSZiEhxCjciUiK33XYbKSkpLFiwoOhYXl4e06ZNY9iwYed9T1ZWFv/85z+JiYnB19eXJk2a8Nprr2EYRrF2ubm5PPLII1SrVo3g4GCuu+46Dh8+fN7PPHLkCKNGjaJGjRr4+vrSokULPv30U+dd6Hns27ePm266ifDwcAICAujcuTNz5sw5p90777xDixYtCAgIoEqVKrRv377Y3a6MjAzGjBlD3bp18fX1pXr16vTp04f169eXaf0ilY3CjYiUSN26denSpQvffPNN0bG5c+eSlpbGrbfeek57wzC47rrrePPNN+nXrx9vvPEGTZo04fHHH+fRRx8t1vauu+5i0qRJXHvttbz88st4e3szcODAcz7z2LFjdO7cmYULF/Lggw/y1ltv0bBhQ+68804mTZrk9Gs+e86uXbsyf/58HnjgAV588UVycnK47rrrmDlzZlG7jz76iIceeojmzZszadIkJkyYQJs2bfj999+L2tx3331MmTKFG264gffee4/HHnsMf39/tm/fXia1i1RahoiIA5999pkBGGvWrDHeffddIzg42MjOzjYMwzBuuukmo1evXoZhGEadOnWMgQMHFr1v1qxZBmC88MIL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bMjUqVPLvM7LUdprXLRo0Tnfoc1m4+jRo+VTcClMnDiRDh06EBwcTPXq1RkyZAg7d+686Ptc6WfwUq7RlX4Op0yZQuvWrYsmd+vSpQtz5851+B5X+v6g9NfoSt/f+bz88svYbDbGjBnjsF15f48KN6Xw3//+l0cffZTnnnuO9evXExsbS9++fTl+/Ph5269YsYLbbruNO++8kw0bNjBkyBCGDBnCli1byrnykint9YE5A2VSUlLRduDAgXKsuHSysrKIjY1l8uTJJWqfkJDAwIED6dWrF/Hx8YwZM4a77rqL+fPnl3Gll66013jWzp07i32P1atXL6MKL93ixYsZPXo0q1atYsGCBeTn53PttdeSlZV1wfe42s/gpVwjuM7PYa1atXj55ZdZt24da9eu5eqrr2bw4MFs3br1vO1d7fuD0l8juM7391dr1qzhgw8+oHXr1g7bWfI9GlJiHTt2NEaPHl20X1hYaERHRxsTJ048b/ubb77ZGDhwYLFjnTp1Mu69994yrfNSlfb6PvvsMyM0NLScqnMuwJg5c6bDNk888YTRokWLYsduueUWo2/fvmVYmfOU5Bp/++03AzBOnTpVLjU50/Hjxw3AWLx48QXbuNrP4F+V5Bpd+efQMAyjSpUqxscff3ze11z9+zvL0TW66veXkZFhNGrUyFiwYIHRo0cP4+GHH75gWyu+R925KaG8vDzWrVtH7969i455eHjQu3dvVq5ced73rFy5slh7gL59+16wvZUu5foAMjMzqVOnDjExMRf914mrcaXv73K1adOGqKgo+vTpw/Lly60up0TS0tIACA8Pv2AbV/8OS3KN4Jo/h4WFhXz77bdkZWXRpUuX87Zx9e+vJNcIrvn9jR49moEDB57z/ZyPFd+jwk0JJScnU1hYSI0aNYodr1GjxgX7Jxw9erRU7a10KdfXpEkTPv30U77//nv+85//YLfb6dq1K4cPHy6Pksvchb6/9PR0Tp8+bVFVzhUVFcX777/P9OnTmT59OjExMfTs2ZP169dbXZpDdrudMWPG0K1bN1q2bHnBdq70M/hXJb1GV/s53Lx5M0FBQfj6+nLfffcxc+ZMmjdvft62rvr9leYaXe37A/j2229Zv349EydOLFF7K77HSrcquDhPly5div1rpGvXrjRr1owPPviA559/3sLKpKSaNGlCkyZNiva7du3K3r17efPNN/nyyy8trMyx0aNHs2XLFpYtW2Z1KWWmpNfoaj+HTZo0IT4+nrS0NKZNm8aIESNYvHjxBX/5u6LSXKOrfX+HDh3i4YcfZsGCBRW647PCTQlVrVoVT09Pjh07Vuz4sWPHiIyMPO97IiMjS9XeSpdyfX/l7e1N27Zt2bNnT1mUWO4u9P2FhITg7+9vUVVlr2PHjhU6NDz44IPMnj2bJUuWUKtWLYdtXeln8M9Kc41/VdF/Dn18fGjYsCEA7dq1Y82aNbz11lt88MEH57R11e+vNNf4VxX9+1u3bh3Hjx/niiuuKDpWWFjIkiVLePfdd8nNzcXT07PYe6z4HvVYqoR8fHxo164dv/zyS9Exu93OL7/8csFnqV26dCnWHmDBggUOn71a5VKu768KCwvZvHkzUVFRZVVmuXKl78+Z4uPjK+R3aBgGDz74IDNnzuTXX3+lXr16F32Pq32Hl3KNf+VqP4d2u53c3NzzvuZq39+FOLrGv6ro398111zD5s2biY+PL9rat2/P8OHDiY+PPyfYgEXfY5l1VXZD3377reHr62tMnTrV2LZtm3HPPfcYYWFhxtGjRw3DMIy///3vxlNPPVXUfvny5YaXl5fx2muvGdu3bzeee+45w9vb29i8ebNVl+BQaa9vwoQJxvz58429e/ca69atM2699VbDz8/P2Lp1q1WX4FBGRoaxYcMGY8OGDQZgvPHGG8aGDRuMAwcOGIZhGE899ZTx97//vaj9vn37jICAAOPxxx83tm/fbkyePNnw9PQ05s2bZ9UlXFRpr/HNN980Zs2aZezevdvYvHmz8fDDDxseHh7GwoULrbqEC7r//vuN0NBQY9GiRUZSUlLRlp2dXdTG1X8GL+UaXenn8KmnnjIWL15sJCQkGJs2bTKeeuopw2azGT///LNhGK7//RlG6a/Rlb6/C/nraKmK8D0q3JTSO++8Y9SuXdvw8fExOnbsaKxatarotR49ehgjRowo1v5///uf0bhxY8PHx8do0aKFMWfOnHKuuHRKc31jxowpalujRg1jwIABxvr16y2oumTODnv+63b2mkaMGGH06NHjnPe0adPG8PHxMerXr2989tln5V53aZT2Gl955RWjQYMGhp+fnxEeHm707NnT+PXXX60p/iLOd11Ase/E1X8GL+UaXenncNSoUUadOnUMHx8fo1q1asY111xT9EvfMFz/+zOM0l+jK31/F/LXcFMRvkebYRhG2d0XEhERESlf6nMjIiIibkXhRkRERNyKwo2IiIi4FYUbERERcSsKNyIiIuJWFG5ERETErSjciIiIiFtRuBERAWw2G7NmzbK6DBFxAoUbEbHcyJEjsdls52z9+vWzujQRcUFaFVxEKoR+/frx2WefFTvm6+trUTUi4sp050ZEKgRfX18iIyOLbVWqVAHMR0ZTpkyhf//++Pv7U79+faZNm1bs/Zs3b+bqq6/G39+fiIgI7rnnHjIzM4u1+fTTT2nRogW+vr5ERUXx4IMPFns9OTmZoUOHEhAQQKNGjfjhhx/K9qJFpEwo3IiIS3j22We54YYb2LhxI8OHD+fWW29l+/btAGRlZdG3b1+qVKnCmjVr+O6771i4cGGx8DJlyhRGjx7NPffcw+bNm/nhhx9o2LBhsXNMmDCBm2++mU2bNjFgwACGDx/OyZMny/U6RcQJynRZThGREhgxYoTh6elpBAYGFttefPFFwzDM1bLvu+++Yu/p1KmTcf/99xuGYRgffvihUaVKFSMzM7Po9Tlz5hgeHh7G0aNHDcMwjOjoaOOZZ565YA2A8X//939F+5mZmQZgzJ0712nXKSLlQ31uRKRC6NWrF1OmTCl2LDw8vOh/d+nSpdhrXbp0IT4+HoDt27cTGxtLYGBg0evdunXDbrezc+dObDYbiYmJXHPNNQ5raN26ddH/DgwMJCQkhOPHj1/qJYmIRRRuRKRCCAwMPOcxkbP4+/uXqJ23t3exfZvNht1uL4uSRKQMqc+NiLiEVatWnbPfrFkzAJo1a8bGjRvJysoqen358uV4eHjQpEkTgoODqVu3Lr/88ku51iwi1tCdGxGpEHJzczl69GixY15eXlStWhWA7777jvbt23PllVfy1VdfsXr1aj755BMAhg8fznPPPceIESMYP348J06c4B//+Ad///vfqVGjBgDjx4/nvvvuo3r16vTv35+MjAyWL1/OP/7xj/K9UBEpcwo3IlIhzJs3j6ioqGLHmjRpwo4dOwBzJNO3337LAw88QFRUFN988w3NmzcHICAggPnz5/Pwww/ToUMHAgICuOGGG3jjjTeKPmvEiBHk5OTw5ptv8thjj1G1alVuvPHG8rtAESk3NsMwDKuLEBFxxGazMXPmTIYMGWJ1KSLiAtTnRkRERNyKwo2IiIi4FfW5EZEKT0/PRaQ0dOdGRERE3IrCjYiIiLgVhRsRERFxKwo3IiIi4lYUbkRERMStKNyIiIiIW1G4EREREbeicCMiIiJuReFGRERE3Mr/A6mQxptG5AubAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Image classification with CNN.\n",
        "import numpy as np\n",
        "from keras.datasets import cifar10\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Dropout, Flatten\n",
        "from keras.layers.convolutional import Conv2D, MaxPooling2D\n",
        "from keras.constraints import maxnorm\n",
        "from keras.utils import np_utils\n",
        "from keras.optimizers import SGD\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# fix random seed for reproducibility\n",
        "np.random.seed(7)\n",
        "\n",
        "# load data\n",
        "(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n",
        "\n",
        "# Normalize inputs from 0-255 to 0.0-1.0\n",
        "X_train = X_train.astype('float32') / 255.0\n",
        "X_test = X_test.astype('float32') / 255.0\n",
        "\n",
        "# One hot encode outputs\n",
        "y_train = np_utils.to_categorical(y_train)\n",
        "y_test = np_utils.to_categorical(y_test)\n",
        "num_classes = y_test.shape[1]\n",
        "\n",
        "# Create the model\n",
        "model = Sequential()\n",
        "#Convolutional input layer, 32 feature maps with a size of 3×3 and a rectifier activation function\n",
        "model.add(Conv2D(32, (3, 3), input_shape=(32, 32, 3), padding='same', activation='relu', kernel_constraint=maxnorm(3)))\n",
        "#Dropout layer at 20%.\n",
        "model.add(Dropout(0.2))\n",
        "#Convolutional layer, 32 feature maps with a size of 3×3 and a rectifier activation function.\n",
        "model.add(Conv2D(32, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))\n",
        "#Max Pool layer with size 2×2.\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "#Convolutional layer, 64 feature maps with a size of 3×3 and a rectifier activation function.\n",
        "model.add(Conv2D(64, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))\n",
        "#Dropout layer at 20%.\n",
        "model.add(Dropout(0.2))\n",
        "#Convolutional layer, 64 feature maps with a size of 3×3 and a rectifier activation function\n",
        "model.add(Conv2D(64, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))\n",
        "#Max Pool layer with size 2×2.\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "#Convolutional layer, 128 feature maps with a size of 3×3 and a rectifier activation function\n",
        "model.add(Conv2D(128, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))\n",
        "#Dropout layer at 20%.\n",
        "model.add(Dropout(0.2))\n",
        "#Convolutional layer, 128 feature maps with a size of 3×3 and a rectifier activation function\n",
        "model.add(Conv2D(128, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))\n",
        "#Max Pool layer with size 2×2.\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "#Flatten layer.\n",
        "model.add(Flatten())\n",
        "#Dropout layer at 20%.\n",
        "model.add(Dropout(0.2))\n",
        "#Fully connected layer with 1024 units and a rectifier activation function.\n",
        "model.add(Dense(1024, activation='relu', kernel_constraint=maxnorm(3)))\n",
        "#Dropout layer at 20%.\n",
        "model.add(Dropout(0.2))\n",
        "#Fully connected layer with 512 units and a rectifier activation function.\n",
        "model.add(Dense(512, activation='relu', kernel_constraint=maxnorm(3)))\n",
        "#Dropout layer at 20%.\n",
        "model.add(Dropout(0.2))\n",
        "#Fully connected output layer with 10 units and a Softmax activation function\n",
        "model.add(Dense(num_classes, activation='softmax'))\n",
        "\n",
        "# Compile model\n",
        "epochs = 5\n",
        "learning_rate = 0.01\n",
        "decay_rate = learning_rate / epochs\n",
        "sgd = SGD(lr=learning_rate, momentum=0.9, decay=decay_rate)\n",
        "model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n",
        "print(model.summary())\n",
        "\n",
        "# Fit the model\n",
        "history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=epochs, batch_size=32)\n",
        "\n",
        "# Evaluate the model\n",
        "scores = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(\"Accuracy: %.2f%%\" % (scores[1] * 100))\n",
        "\n",
        "# Predict the first 4 images of the test data\n",
        "predictions = model.predict(X_test[:4])\n",
        "# Convert the predictions to class labels\n",
        "predicted_labels = np.argmax(predictions, axis=1)\n",
        "# Convert the actual labels to class labels\n",
        "actual_labels = np.argmax(y_test[:4], axis=1)\n",
        "\n",
        "# Print the predicted and actual labels for the first 4 images\n",
        "\n",
        "print(\"Predicted labels:\", predicted_labels)\n",
        "\n",
        "print(\"Actual labels: \", actual_labels)\n",
        "\n",
        "\n",
        "# Plot the training and validation loss\n",
        "\n",
        "plt.plot(history.history['loss'])\n",
        "\n",
        "plt.plot(history.history['val_loss'])\n",
        "\n",
        "plt.title('Model Loss')\n",
        "\n",
        "plt.ylabel('Loss')\n",
        "\n",
        "plt.xlabel('Epoch')\n",
        "\n",
        "plt.legend(['train', 'val'], loc='upper right')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "\n",
        "plt.plot(history.history['accuracy'])\n",
        "\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "\n",
        "plt.title('Model Accuracy')\n",
        "plt.ylabel('Accuracy')\n",
        "\n",
        "plt.xlabel('Epoch')\n",
        "\n",
        "plt.legend(['train', 'val'], loc='lower right')\n",
        "\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Simple CNN model for CIFAR-10\n",
        "import numpy\n",
        "from keras.datasets import cifar10\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import Dropout\n",
        "from keras.layers import Flatten\n",
        "from keras.constraints import maxnorm\n",
        "from keras.optimizers import SGD\n",
        "from keras.layers.convolutional import Conv2D\n",
        "from keras.layers.convolutional import MaxPooling2D\n",
        "from keras.utils import np_utils\n",
        "\n",
        "\n",
        "# fix random seed for reproducibility\n",
        "seed = 7\n",
        "numpy.random.seed(seed)\n",
        "# load data\n",
        "(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n",
        "# normalize inputs from 0-255 to 0.0-1.0\n",
        "X_train = X_train.astype('float32')\n",
        "X_test = X_test.astype('float32')\n",
        "X_train = X_train / 255.0\n",
        "X_test = X_test / 255.0\n",
        "# one hot encode outputs\n",
        "y_train = np_utils.to_categorical(y_train)\n",
        "y_test = np_utils.to_categorical(y_test)\n",
        "num_classes = y_test.shape[1]\n",
        "# Create the model\n",
        "model = Sequential()\n",
        "model.add(Conv2D(32, (3, 3), input_shape=(32, 32, 3), padding='same', activation='relu', kernel_constraint=maxnorm(3)))\n",
        "model.add(Dropout(0.2))\n",
        "model.add(Conv2D(32, (3, 3), activation='relu', padding='same', kernel_constraint=maxnorm(3)))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(Flatten())\n",
        "model.add(Dense(512, activation='relu', kernel_constraint=maxnorm(3)))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(num_classes, activation='softmax'))\n",
        "# Compile model\n",
        "epochs = 25\n",
        "lrate = 0.01\n",
        "decay = lrate/epochs\n",
        "sgd = SGD(lr=lrate, momentum=0.9, decay=decay)\n",
        "model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n",
        "print(model.summary())\n",
        "# Fit the model\n",
        "history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=epochs, batch_size=32)\n",
        "\n",
        "# Final evaluation of the model\n",
        "scores = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(\"Accuracy: %.2f%%\" % (scores[1]*100))\n",
        "# Predict the first 4 images of the test data\n",
        "predictions = model.predict(X_test[:4])\n",
        "# Convert the predictions to class labels\n",
        "predicted_labels = np.argmax(predictions, axis=1)\n",
        "# Convert the actual labels to class labels\n",
        "actual_labels = np.argmax(y_test[:4], axis=1)\n",
        "\n",
        "# Print the predicted and actual labels for the first 4 images\n",
        "\n",
        "print(\"Predicted labels:\", predicted_labels)\n",
        "\n",
        "print(\"Actual labels: \", actual_labels)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VLWkCwEPKyWB",
        "outputId": "4628ffb7-dc8f-45a3-b815-894f0db674f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_4\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_12 (Conv2D)          (None, 32, 32, 32)        896       \n",
            "                                                                 \n",
            " dropout_12 (Dropout)        (None, 32, 32, 32)        0         \n",
            "                                                                 \n",
            " conv2d_13 (Conv2D)          (None, 32, 32, 32)        9248      \n",
            "                                                                 \n",
            " max_pooling2d_6 (MaxPooling  (None, 16, 16, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten_4 (Flatten)         (None, 8192)              0         \n",
            "                                                                 \n",
            " dense_9 (Dense)             (None, 512)               4194816   \n",
            "                                                                 \n",
            " dropout_13 (Dropout)        (None, 512)               0         \n",
            "                                                                 \n",
            " dense_10 (Dense)            (None, 10)                5130      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,210,090\n",
            "Trainable params: 4,210,090\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n",
            "Epoch 1/25\n",
            "1563/1563 [==============================] - 11s 7ms/step - loss: 1.7048 - accuracy: 0.3841 - val_loss: 1.3620 - val_accuracy: 0.5105\n",
            "Epoch 2/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 1.3368 - accuracy: 0.5203 - val_loss: 1.2018 - val_accuracy: 0.5747\n",
            "Epoch 3/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 1.1692 - accuracy: 0.5849 - val_loss: 1.0910 - val_accuracy: 0.6169\n",
            "Epoch 4/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 1.0454 - accuracy: 0.6260 - val_loss: 1.0357 - val_accuracy: 0.6335\n",
            "Epoch 5/25\n",
            "1563/1563 [==============================] - 10s 7ms/step - loss: 0.9477 - accuracy: 0.6654 - val_loss: 0.9789 - val_accuracy: 0.6561\n",
            "Epoch 6/25\n",
            "1563/1563 [==============================] - 11s 7ms/step - loss: 0.8634 - accuracy: 0.6923 - val_loss: 0.9539 - val_accuracy: 0.6676\n",
            "Epoch 7/25\n",
            "1563/1563 [==============================] - 10s 7ms/step - loss: 0.7873 - accuracy: 0.7223 - val_loss: 0.9273 - val_accuracy: 0.6816\n",
            "Epoch 8/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.7176 - accuracy: 0.7456 - val_loss: 0.9152 - val_accuracy: 0.6842\n",
            "Epoch 9/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.6636 - accuracy: 0.7669 - val_loss: 0.8962 - val_accuracy: 0.6916\n",
            "Epoch 10/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.6103 - accuracy: 0.7842 - val_loss: 0.9067 - val_accuracy: 0.6960\n",
            "Epoch 11/25\n",
            "1563/1563 [==============================] - 10s 7ms/step - loss: 0.5658 - accuracy: 0.7990 - val_loss: 0.9180 - val_accuracy: 0.6996\n",
            "Epoch 12/25\n",
            "1563/1563 [==============================] - 10s 7ms/step - loss: 0.5206 - accuracy: 0.8162 - val_loss: 0.9163 - val_accuracy: 0.7023\n",
            "Epoch 13/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.4799 - accuracy: 0.8302 - val_loss: 0.9207 - val_accuracy: 0.7049\n",
            "Epoch 14/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.4431 - accuracy: 0.8425 - val_loss: 0.9489 - val_accuracy: 0.7053\n",
            "Epoch 15/25\n",
            "1563/1563 [==============================] - 9s 6ms/step - loss: 0.4144 - accuracy: 0.8534 - val_loss: 0.9235 - val_accuracy: 0.7063\n",
            "Epoch 16/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.3930 - accuracy: 0.8608 - val_loss: 0.9455 - val_accuracy: 0.7101\n",
            "Epoch 17/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.3641 - accuracy: 0.8713 - val_loss: 0.9623 - val_accuracy: 0.7069\n",
            "Epoch 18/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.3388 - accuracy: 0.8808 - val_loss: 0.9797 - val_accuracy: 0.7059\n",
            "Epoch 19/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.3176 - accuracy: 0.8905 - val_loss: 1.0002 - val_accuracy: 0.7076\n",
            "Epoch 20/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.2987 - accuracy: 0.8956 - val_loss: 1.0108 - val_accuracy: 0.7069\n",
            "Epoch 21/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.2849 - accuracy: 0.8993 - val_loss: 1.0249 - val_accuracy: 0.7075\n",
            "Epoch 22/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.2695 - accuracy: 0.9069 - val_loss: 1.0372 - val_accuracy: 0.7074\n",
            "Epoch 23/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.2497 - accuracy: 0.9139 - val_loss: 1.0428 - val_accuracy: 0.7081\n",
            "Epoch 24/25\n",
            "1563/1563 [==============================] - 9s 6ms/step - loss: 0.2410 - accuracy: 0.9167 - val_loss: 1.0566 - val_accuracy: 0.7101\n",
            "Epoch 25/25\n",
            "1563/1563 [==============================] - 10s 6ms/step - loss: 0.2295 - accuracy: 0.9208 - val_loss: 1.0796 - val_accuracy: 0.7062\n",
            "Accuracy: 70.62%\n",
            "1/1 [==============================] - 0s 88ms/step\n",
            "Predicted labels: [3 8 8 0]\n",
            "Actual labels:  [3 8 8 0]\n"
          ]
        }
      ]
    }
  ]
}
